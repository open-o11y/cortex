name: ci
on: [ push ]
jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2
  #   services:
  #     cassandra:
  #       image: cassandra:3.11
  #       env:
  #         JVM_OPTS: "-Xms1024M -Xmx1024M"
  #       ports:
  #       - 3306
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v1
  #     - name: Check vendor directory is consistent.
  #       run: make BUILD_IN_CONTAINER=false mod-check
  #     - name: Run Tests
  #       run: | # Needs to be fixed to use service and find go/src
  #         CASSANDRA_TEST_ADDRESSES=localhost:3306 \
  #         make BUILD_IN_CONTAINER=false test 

  # integration-configs-db:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v1
  #     - name: load cache
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/images
  #         key: v1-cortex-{{ .Branch }}-{{ .Revision }}
  #     - run: echo "$(pwd)"
  #     - run: echo "$(ls -al)"
  #     - name: Integration Test
  #       run: | # make fails with /bin/sh: 1: sudo: not found
  #         touch build-image/.uptodate
  #         MIGRATIONS_DIR=$(pwd)/cmd/cortex/migrations
  #         make BUILD_IMAGE=quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2 configs-integration-test

  build:
    runs-on: ubuntu-latest
    container:
      image: quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: Install Docker Client
        run: |
          set -x
          VER="17.03.0-ce"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          mv /tmp/docker/* /usr/bin
      - name: Build
        run: |
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false
      - name: Buld Website
        run: |  
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false web-build
      - persist_to_workspace:
          root: .
          paths:
            - website/public/
      - uses: actions/upload-artifact@v2
        with:
          name: Frontend Protobuf
          path: pkg/querier/frontend/frontend.pb.go
      - uses: actions/upload-artifact@v2
        with:
          name: Caching Index Client Protobuf
          path: pkg/chunk/storage/caching_index_client.pb.go
      - uses: actions/upload-artifact@v2
        with:
          name: Ring Protobuf
          path: pkg/ring/ring.pb.go
      - uses: actions/upload-artifact@v2
        with:
          name: Cortex Protobuf
          path: pkg/ingester/client/cortex.pb.go
      - uses: actions/upload-artifact@v2
        with:
          name: Rules Protobuf
          path: pkg/ruler/rules/rules.pb.go
      - name: Save Images
        run: |
          mkdir /tmp/images
          ln -s /tmp/images ./docker-images
          make BUILD_IN_CONTAINER=false save-images
      - name: Save Cache
        uses: actions/cache@v2
        with:
          path: /tmp/images
          key: v1-cortex-{{ .Branch }}-{{ .Revision }}

  # test:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: circleci/golang:1.15-node
  #   steps:
  #     - name: setup file system permissions
  #       run: sudo chmod -R 777 $GITHUB_WORKSPACE /github /__w/_temp
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #     - name: make promu
  #       run: make promu
  #     - name: load go modules cache
  #       uses: actions/cache@v2
  #       with:
  #         path: /home/circleci/go/pkg/mod
  #         key: v1-{{ arch }}-{{ checksum "go.sum" }}
  #     - name: load yarn cache
  #       uses: actions/cache@v2
  #       with:
  #         path: /home/circleci/.cache/yarn
  #         key: v3-npm-deps-{{ checksum "web/ui/react-app/yarn.lock" }}--{{ arch }}-{{ checksum "go.sum"  }}
  #         restore-keys: v3-npm-deps--{{ arch }}-{{ checksum "go.sum"  }}
  #     - run: make
  #       env:
  #           # Run garbage collection more aggressively to avoid getting OOMed during the lint phase.
  #         GOGC: "20"
  #         # By default Go uses GOMAXPROCS but a Circle CI executor has many
  #         # cores (> 30) while the CPU and RAM resources are throttled. If we
  #         # don't limit this to the number of allocated cores, the job is
  #         # likely to get OOMed and killed.
  #         GOOPTS: "-p 2"
  #         GOMAXPROCS: "2"
  #     - name: prometheus/check_proto
  #       env:
  #         VERSION: 3.12.3
  #       run: |
  #         curl -s -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protoc-3.12.3-linux-x86_64.zip > /tmp/protoc.zip
  #         unzip -d /tmp /tmp/protoc.zip
  #         chmod +x /tmp/bin/protoc
  #         echo "::add-path::/tmp/bin/"
  #     - run: make proto
  #     - run: git diff --exit-code
  #     - name: prometheus/store_artifact prometheus
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: prometheus
  #         path: prometheus
  #     - name: prometheus/store_artifact promtool
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: promtool
  #         path: promtool
  # test_windows:
  #   runs-on: windows-latest
  #   steps:
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #     - name: "update golang"
  #       # windows-latest comes with Go 1.14.9, not Go 1.15
  #       run: choco upgrade -y golang
  #       shell: bash
  #     - name: change directory to project root
  #       run: cd /go/src/github.com/prometheus/prometheus
  #       shell: bash