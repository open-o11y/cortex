name: ci
# TODO: Add Tag Filters For Release Candidate and Limit Trigger to Master Branch.
on:
  push:
    branches: [master]
    tags:
      - v[0-9]+.[0-9]+.[0-9]+**
  pull_request:
jobs:
  lint:
    runs-on: ubuntu-latest
    container:
      image: quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2
    steps:
      - name: checkout repo
        uses: actions/checkout@v1
      - name: Sym link expected path to github workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Generate protobuf files
        run: "protoc -I /go/src:./vendor/github.com/thanos-io/thanos/pkg:./vendor/github.com/gogo/protobuf:./vendor:./pkg/ruler --gogoslick_out=plugins=grpc,Mgoogle/protobuf/any.proto=github.com/gogo/protobuf/types,:./pkg/ruler ./pkg/ruler/ruler.proto"
      - name: Lint
        run: make BUILD_IN_CONTAINER=false lint
      - name: Check vendor directory is consistent
        run: make BUILD_IN_CONTAINER=false mod-check
      - name: Check protos are consistent.
        run: make BUILD_IN_CONTAINER=false check-protos
      - name: Check generated documentation is consistent.
        run: make BUILD_IN_CONTAINER=false check-doc
      - name: Check white noise.
        run: make BUILD_IN_CONTAINER=false check-white-noise

  test:
    runs-on: ubuntu-latest
    container:
      image: quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2
    services:
      cassandra:
        image: cassandra:3.11
        env:
          JVM_OPTS: "-Xms1024M -Xmx1024M"
        ports:
        - 9042:9042
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: Get Dependencies
        run: go get -v -t -d ./...
      - name: Sym link expected path to github workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Run Tests
        run: CASSANDRA_TEST_ADDRESSES=cassandra:9042 make BUILD_IN_CONTAINER=false test

  build:
    runs-on: ubuntu-latest
    container:
      image: quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: Install Docker Client
        run: |
          set -x
          VER="17.03.0-ce"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          mv /tmp/docker/* /usr/bin
      - name: Sym link expected path to github workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Build
        run: |
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false
      - name: Buld Website
        run: |
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false web-build
      - uses: actions/upload-artifact@v2
        with:
          name: website public
          path: website/public/
      - uses: actions/upload-artifact@v2
        with:
          name: Frontend Protobuf
          path: pkg/querier/frontend/frontend.pb.go
      - uses: actions/upload-artifact@v2
        with:
          name: Caching Index Client Protobuf
          path: pkg/chunk/storage/caching_index_client.pb.go
      - uses: actions/upload-artifact@v2
        with:
          name: Ring Protobuf
          path: pkg/ring/ring.pb.go
      - uses: actions/upload-artifact@v2
        with:
          name: Cortex Protobuf
          path: pkg/ingester/client/cortex.pb.go
      - uses: actions/upload-artifact@v2
        with:
          name: Rules Protobuf
          path: pkg/ruler/rules/rules.pb.go
      - name: Save Images
        run: |
          mkdir /tmp/images
          ln -s /tmp/images ./docker-images
          make BUILD_IN_CONTAINER=false save-images
      - name: Compressing Images
        run: tar -zcvf images.tar.gz /tmp/images
      - name: Cache Images
        uses: actions/upload-artifact@v2
        with:
          name: Docker Images
          path: ./images.tar.gz

  # DOES NOT WORK DUE TO MISSING IMAGE_PREFIX
  # TODO: Get secret or workaround for IMAGE_PREFIX
  # integration:
  #   needs: build
  #   runs-on: ubuntu-16.04
  #   steps:
  #     - name: Install Docker Client
  #       run: |
  #         set -x
  #         VER="17.03.0-ce"
  #         curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
  #         tar -xz -C /tmp -f /tmp/docker-$VER.tgz
  #         sudo mv /tmp/docker/* /usr/bin
  #     - name: Upgrade golang
  #       run: |
  #         cd /tmp
  #         wget https://dl.google.com/go/go1.14.9.linux-amd64.tar.gz
  #         tar -zxvf go1.14.9.linux-amd64.tar.gz
  #         sudo rm -fr /usr/local/go
  #         sudo mv /tmp/go /usr/local/go
  #         cd -
  #     - name: Checkout Repo
  #       uses: actions/checkout@v1
  #     - name: Sym link expected path to github workspace
  #       run: |
  #         mkdir -p /go/src/github.com/cortexproject/cortex
  #         ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
  #     - name: Restore Images
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: Images
  #     - name: Uncompress Images
  #       run: tar -zxvf images.tar.gz -C /
  #     - name: Load Images
  #       run: |
  #         ln -s /tmp/images ./docker-images
  #         make BUILD_IN_CONTAINER=false load-images
  #     - name: Preload Docker Images
  #       # We download docker images used by integration tests so that all images are available
  #       # locally and the download time doesn't account in the test execution time, which is subject
  #       # to a timeout
  #       run: |
  #         docker pull minio/minio:RELEASE.2019-12-30T05-45-39Z
  #         docker pull amazon/dynamodb-local:1.11.477
  #         docker pull consul:0.9
  #         docker pull gcr.io/etcd-development/etcd:v3.4.7
  #         docker pull quay.io/cortexproject/cortex:v0.6.0
  #         docker pull quay.io/cortexproject/cortex:v0.7.0
  #         docker pull quay.io/cortexproject/cortex:v1.0.0
  #         docker pull quay.io/cortexproject/cortex:v1.1.0
  #         docker pull shopify/bigtable-emulator:0.1.0
  #         docker pull rinscy/cassandra:3.11.0
  #         docker pull memcached:1.6.1
  #         docker pull bouncestorage/swift-aio:55ba4331
  #     - name: Integration Tests
  #       run: |
  #         export CORTEX_IMAGE_PREFIX="${IMAGE_PREFIX:-quay.io/cortexproject/}"
  #         export CORTEX_IMAGE="${CORTEX_IMAGE_PREFIX}cortex:${CIRCLE_TAG:-$(./tools/image-tag)}"
  #         export CORTEX_CHECKOUT_DIR="/go/src/github.com/cortexproject/cortex"
  #         echo "Running integration tests with image: $CORTEX_IMAGE"
  #         go test -tags=requires_docker -timeout 1200s -v -count=1 ./integration/...

  integration-configs-db:
      needs: build
      runs-on: ubuntu-16.04
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v1
        - name: Load cache from Build job
          uses: actions/download-artifact@v2
          with:
            name: Docker Images
        - name: extract images from cache
          run: tar -xzvf images.tar.gz -C /
        - name: Install Docker Client
          run: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
        - name: Integration Test
          run: |
            touch build-image/.uptodate
            MIGRATIONS_DIR=$(pwd)/cmd/cortex/migrations
            make BUILD_IMAGE=quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2 TTY='' configs-integration-test
  deploy_website:
    needs: build # actual line: [build, test] but keeping at [build] for rapid testing
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    container:
      image: quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: Sym link expected path to github workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: download website from build job
        uses: actions/download-artifact@v2
        with:
          name: website public
          path: website/public
      - name: deploy-website
        run: make BUILD_IN_CONTAINER=false web-deploy
  deploy:
    needs: build # actual line: [build, test, lint, integration, integration-configs-db] but keeping at [build] for rapid testing
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    container:
      image: quay.io/cortexproject/build-image:update-golang-1.14.9-eb0c8d4d2
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: Sym link expected path to github workspace
        run: |
          mkdir -p /go/src/github.com/cortexproject/cortex
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/cortexproject/cortex
      - name: Install Docker Client
        run: |
          set -x
          VER="17.03.0-ce"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          mv /tmp/docker/* /usr/bin
      - name: Load cache from Build job
          uses: actions/download-artifact@v2
          with:
            name: Docker Images
      - name: extract images from cache
        run: tar -xzvf images.tar.gz -C /
      - name: Load Images
        run: ln -s /tmp/images ./docker-images; make BUILD_IN_CONTAINER=false load-images
      - name: Deploy
        run: |
          if [ -n "$DOCKER_REGISTRY_PASSWORD" ]; then
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
          fi
          if [ -n "$QUAY_PASSWORD" ]; then
            docker login -u "$QUAY_USER" -p "$QUAY_PASSWORD" quay.io;
          fi
          IMAGE_TAG=$CIRCLE_TAG ./push-images $NOQUAY
        env:
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          DOCKER_REGISTRY_USER: ${{secrets.DOCKER_REGISTRY_USER}}
          QUAY_PASSWORD: ${{secrets.QUAY_PASSWORD}}
          QUAY_USER: ${{secrets.QUAY_USER}}
          CIRCLE_TAG: ${{secrets.CIRCLE_TAG}}
          NOQUAY: ${{secrets.NOQUAY}}
